version: 2.1

orbs:
  kubernetes: circleci/kubernetes@<<pipeline.parameters.dev-orb-version>>
  orb-tools: circleci/orb-tools@10.0.5

# Pipeline parameters
parameters:
  run-integration-tests:
    description: An internal flag to prevent integration test from running before a development version has been created.
    type: boolean
    default: false
  dev-orb-version:
    description: >
      The development version of the orb to test.
      This value is automatically adjusted by the "trigger-integration-tests-workflow" job to correspond with the specific version created by the commit and should not be edited.
      A "dev:alpha" version must exist for the initial pipeline run.
    type: string
    default: "dev:alpha"

executors:
  ci-base:
    docker:
      - image: cimg/base:stable

  machine:
    machine: true

  minikube:
    machine:
      image: ubuntu-2004:202107-02
    environment:
      CHANGE_MINIKUBE_NONE_USER=true

  macos:
    macos:
      xcode: 13.2.0

commands:
  start-minikube:
    steps:
      - run:
          name: Start minikube
          command: |
            sudo apt-get update
            sudo apt-get install -y conntrack
            curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 \
              && chmod +x minikube
            sudo cp minikube /usr/local/bin && rm minikube
            sudo -E minikube start --vm-driver=none --cpus 2 --memory 2048
  integration-tests:
    steps:
      - checkout
      - kubernetes/install
      - run:
          name: Test kops
          command: kops version
      - run:
          name: Test kubectl
          command: kubectl
      - kubernetes/install-kubeconfig:
          kubeconfig: MY_KUBECONFIG_DATA
      - run:
          name: Test kubeconfig output
          command: |
            [[ -f $HOME/.kube/config && ! -z $HOME/.kube/config && $(<$HOME/.kube/config) == "test" ]]
  integration-tests-specific-version:
    steps:
      - checkout
      - kubernetes/install:
          kubectl-version: v1.15.2
          kops-version: 1.12.2
      - run:
          name: Test kops version
          command: kops version | grep "1.12.2"
      - run:
          name: Test kubectl version
          command: |
            set +e
            # ignore connection refused error
            KUBECTL_VERSION=$(kubectl version)
            set -e
            echo $KUBECTL_VERSION | grep "v1.15.2"
      - kubernetes/install-kubeconfig
      - run:
          name: Test kubeconfig output
          command: |
            [[ -f $HOME/.kube/config && ! -z $HOME/.kube/config && $(<$HOME/.kube/config) == "test" ]]

jobs:
  integration-test-docker:
    executor: ci-base
    environment:
      # For testing the install-kubeconfig command
      MY_KUBECONFIG_DATA: dGVzdA==
    steps:
      - integration-tests

  integration-test-machine:
    executor: machine
    environment:
      # For testing the install-kubeconfig command
      KUBECONFIG_DATA: dGVzdA==
    steps:
      - integration-tests-specific-version

  integration-test-macos:
    executor: macos
    environment:
      # For testing the install-kubeconfig command
      MY_KUBECONFIG_DATA: dGVzdA==
    steps:
      - integration-tests

  integration-test-kubectl:
    executor: minikube
    steps:
      - checkout
      - kubernetes/install-kubectl
      - start-minikube
      - kubernetes/create-or-update-resource:
          resource-file-path: "tests/nginx-deployment/deployment.yaml"
          resource-name: "deployment/nginx-deployment"
          get-rollout-status: true
          show-kubectl-command: true
      - kubernetes/update-container-image:
          resource-name: "deployment/nginx-deployment"
          container-image-updates: "nginx=nginx:1.9.1 redis=redis:5-buster"
      - kubernetes/get-rollout-status:
          resource-name: "deployment/nginx-deployment"
          watch-rollout-status: true
      - kubernetes/rollback:
          resource-name: "deployment/nginx-deployment"
          get-rollout-status: true
      - kubernetes/delete-resource:
          resource-types: "deployments"
          resource-names: "nginx-deployment"
          now: true
          wait: true
      - kubernetes/create-or-update-resource:
          resource-file-path: "tests/kustomize/overlays/staging"
          resource-name: "deployment/staging-hello"
          kustomize: "true"
          get-rollout-status: true
          show-kubectl-command: true
      - kubernetes/delete-resource:
          resource-file-path: "tests/kustomize/overlays/staging"
          kustomize: true
          now: true
          wait: true

workflows:
  lint_pack-validate_publish-dev:
    unless: << pipeline.parameters.run-integration-tests >>
    jobs:
      - orb-tools/lint

      - orb-tools/pack:
          requires:
            - orb-tools/lint

      - orb-tools/publish-dev:
          orb-name: circleci/kubernetes
          context: orb-publishing
          requires:
            - orb-tools/pack

      - orb-tools/trigger-integration-tests-workflow:
          name: trigger-integration-dev
          context: orb-publishing
          requires:
            - orb-tools/publish-dev

  integration-tests_prod-release:
    when: << pipeline.parameters.run-integration-tests >>
    jobs:
      - integration-test-docker
      - integration-test-machine
      - integration-test-macos
      - integration-test-kubectl

      - orb-tools/dev-promote-prod-from-commit-subject:
          orb-name: circleci/kubernetes
          context: orb-publishing
          add-pr-comment: true
          fail-if-semver-not-indicated: true
          publish-version-tag: true
          bot-token-variable: GHI_TOKEN
          bot-user: cpe-bot
          ssh-fingerprints: e0:f8:4b:34:54:de:74:23:af:7e:3d:39:28:cb:2f:7d
          requires:
            - integration-test-docker
            - integration-test-machine
            - integration-test-macos
            - integration-test-kubectl
          filters:
            branches:
              only: master
